diff --git a/configure.ac b/configure.ac
index 1e05aa38..05ac1074 100644
--- a/configure.ac
+++ b/configure.ac
@@ -134,6 +134,24 @@ fi
 AC_SUBST(JSON_GLIB_CFLAGS)
 AC_SUBST(JSON_GLIB_LIBS)
 
+
+dnl ******************************
+dnl
+dnl gtk-mac-integration
+dnl
+PKG_CHECK_MODULES(MAC_INTEGRATION,
+		  [gtk-mac-integration-gtk3],
+		  [enable_mac_integration=yes],
+		  [enable_mac_integration=no])
+
+if test x$enable_mac_integration = xyes ; then
+	AC_DEFINE(HAVE_MAC_INTEGRATION, 1, [Define to 1 if gtk-mac-integration support is included])
+fi
+
+AC_SUBST(MAC_INTEGRATION_CFLAGS)
+AC_SUBST(MAC_INTEGRATION_LIBS)
+
+
 AM_CONDITIONAL(ENABLE_JSON_GLIB, test x"$enable_json_glib" != x"no")
 
 dnl ******************************
@@ -247,7 +265,7 @@ dnl ===========================================================================
 dnl
 dnl SM Client
 dnl
-GDK_TARGET="$($PKG_CONFIG --variable target gdk-2.0)"
+GDK_TARGET="$($PKG_CONFIG --variable target gdk-3.0)"
 
 AC_MSG_CHECKING([which smclient backend to use])
 AC_ARG_WITH([smclient],
@@ -365,5 +383,5 @@ Configuration:
 	Use libmagic            : ${enable_magic}
 	JSON support            : ${enable_json_glib}
 	Notifications support   : ${enable_notification}
-	Use libarchive          : ${enable_libarchive}
+	Use libarchive          : ${enable_libarchive},${LIBARCHIVE_LIBS}
 "
diff --git a/copy-n-paste/Makefile.am b/copy-n-paste/Makefile.am
index 59789f45..efd4a54d 100644
--- a/copy-n-paste/Makefile.am
+++ b/copy-n-paste/Makefile.am
@@ -4,7 +4,7 @@ AM_CPPFLAGS = $(DISABLE_DEPRECATED) \
 noinst_LTLIBRARIES = libeggsmclient.la
 
 libeggsmclient_la_LIBADD = $(GTK_LIBS)
-libeggsmclient_la_CFLAGS = $(GTK_CFLAGS)
+libeggsmclient_la_CFLAGS = $(GTK_CFLAGS) $(MAC_INTEGRATION_CFLAGS)
 
 libeggsmclient_la_SOURCES = 			\
 	eggdesktopfile.h 			\
diff --git a/copy-n-paste/eggdesktopfile.c b/copy-n-paste/eggdesktopfile.c
index e6692e12..0c4fff34 100644
--- a/copy-n-paste/eggdesktopfile.c
+++ b/copy-n-paste/eggdesktopfile.c
@@ -31,7 +31,11 @@
 #include <unistd.h>
 
 #include <glib/gi18n.h>
+
+#ifndef MAC_INTEGRATION
 #include <gdk/gdkx.h>
+#endif
+
 #include <gtk/gtk.h>
 
 struct EggDesktopFile {
diff --git a/src/Makefile.am b/src/Makefile.am
index dfc09583..46913811 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -43,7 +43,8 @@ AM_CPPFLAGS =						\
 	$(FR_CFLAGS)					\
 	$(JSON_GLIB_CFLAGS)				\
 	$(LIBNOTIFY_CFLAGS)				\
-	$(LIBARCHIVE_CFLAGS)
+	$(LIBARCHIVE_CFLAGS)			\
+	$(MAC_INTEGRATION_CFLAGS)
 
 BUILT_SOURCES =			\
 	fr-marshal.c		\
@@ -226,7 +227,8 @@ file_roller_LDADD =					\
 	$(FR_LIBS)					\
 	$(JSON_GLIB_LIBS)				\
 	$(LIBNOTIFY_LIBS)				\
-	$(LIBARCHIVE_LIBS)
+	$(LIBARCHIVE_LIBS)				\
+	$(MAC_INTEGRATION_LIBS)
 
 if ENABLE_MAGIC
 file_roller_LDADD += $(MAGIC_LIBS)
diff --git a/src/actions.c b/src/actions.c
index 066ec726..46115e4a 100644
--- a/src/actions.c
+++ b/src/actions.c
@@ -40,6 +40,9 @@
 #include "fr-init.h"
 #include "typedefs.h"
 
+#ifdef MAC_INTEGRATION
+#include <gtkosxapplication.h>
+#endif
 
 void
 activate_action_new (GtkAction *action,
@@ -481,9 +484,16 @@ activate_action_about (GtkAction *action,
 	FrWindow   *window = data;
 	const char *authors[] = { "Paolo Bacchilega <paolo.bacchilega@libero.it>", NULL	};
 	const char *documenters [] = { "Alexander Kirillov", "Breda McColgan", NULL };
+    char *version = g_strdup(VERSION);
+    
+#ifdef MAC_INTEGRATION
+    static char *versionCode = NULL;
+    if(versionCode == NULL) versionCode = gtkosx_application_get_bundle_info("CFBundleVersionCode");
+    version = g_strdup_printf(VERSION"(%s)",versionCode);
+#endif
 
 	gtk_show_about_dialog (GTK_WINDOW (window),
-			       "version", VERSION,
+			       "version", version,
 			       "copyright", _("Copyright \xc2\xa9 2001â€“2010 Free Software Foundation, Inc."),
 			       "comments", _("An archive manager for GNOME."),
 			       "authors", authors,
@@ -493,4 +503,5 @@ activate_action_about (GtkAction *action,
 			       "license-type", GTK_LICENSE_GPL_2_0,
 			       "wrap-license", TRUE,
 			       NULL);
+    g_free(version);
 }
diff --git a/src/app-menu.c b/src/app-menu.c
index 8a51e0e1..0b73348e 100644
--- a/src/app-menu.c
+++ b/src/app-menu.c
@@ -29,6 +29,11 @@
 #include "gtk-utils.h"
 #include "preferences.h"
 
+#include <glib/gi18n.h>
+
+#ifdef MAC_INTEGRATION
+#include<gtkosxapplication.h>
+#endif
 
 #define GET_ACTION(action_name) (G_SIMPLE_ACTION (g_action_map_lookup_action (G_ACTION_MAP (application), (action_name))))
 
@@ -143,6 +148,24 @@ activate_quit (GSimpleAction *action,
 	activate_action_quit (NULL, NULL);
 }
 
+#ifdef MAC_INTEGRATION
+static inline void go_check_update(GtkWindow *window);
+
+static void
+activate_checkupdate (GSimpleAction *action,
+               GVariant      *parameter,
+               gpointer       user_data)
+{
+	GApplication *application = user_data;
+	GList        *windows;
+    
+	windows = gtk_application_get_windows (GTK_APPLICATION (application));
+	if (windows != NULL)
+		go_check_update (GTK_WINDOW(windows->data));
+    else
+        go_check_update (NULL);
+}
+#endif
 
 static const GActionEntry app_menu_entries[] = {
 	{ "new",  activate_new },
@@ -151,6 +174,11 @@ static const GActionEntry app_menu_entries[] = {
 	{ "help",  activate_help },
 	{ "about", activate_about },
 	{ "quit",  activate_quit }
+    
+#ifdef MAC_INTEGRATION
+    ,
+    {"update",activate_checkupdate }
+#endif
 };
 
 
@@ -215,3 +243,103 @@ initialize_app_menu (GApplication *application)
 			  G_CALLBACK (pref_list_mode_changed),
 			  application);
 }
+
+#ifdef MAC_INTEGRATION
+
+static inline gint64 get_bundle_version_code()
+{
+    static gint64 ret  = 0;
+    if(ret == 0){
+        gchar *info = gtkosx_application_get_bundle_info("CFBundleVersionCode");
+        if(info){
+            ret = g_ascii_strtoll(info,NULL,10);
+            g_free(info);
+        }
+    }
+    return ret;
+}
+
+#define CURRENT_VERSION (get_bundle_version_code())
+
+typedef struct {
+    GtkMessageDialog *mDialog;
+    GKeyFile         *keyfile;
+    gboolean         canUpdate;
+}CheckingData;
+
+
+static void  _on_checking_response(GtkDialog *dialog,
+                                   gint       response_id,
+                                   CheckingData   *data)
+{
+    if(response_id == GTK_RESPONSE_OK && data->canUpdate){
+        gtk_show_uri(NULL,
+                     "http://fileroller.xx51.net/",
+                     g_get_real_time(),
+                     NULL);
+    }
+    gtk_widget_destroy(GTK_WIDGET(dialog));
+    g_key_file_free(data->keyfile);
+    g_free(data);
+}
+
+static gboolean _on_checking_update_finished (CheckingData *data)
+{
+    gint64 versionCode =    g_key_file_get_int64  (data->keyfile,"VersionInfo","versionCode",NULL);
+    if(versionCode>CURRENT_VERSION){
+        gtk_message_dialog_format_secondary_markup(data->mDialog,
+                                                   _("Found new version: %s(%ld).\nGo and update it ?"),
+                                                   g_key_file_get_value(data->keyfile,"VersionInfo","version",NULL),
+                                                   versionCode);
+        data->canUpdate = TRUE;
+        gtk_dialog_set_response_sensitive(GTK_DIALOG(data->mDialog),GTK_RESPONSE_CANCEL,TRUE);
+
+    }else{
+        gtk_message_dialog_format_secondary_markup(data->mDialog,
+                                                   _("No update"));
+        data->canUpdate = FALSE;
+    }
+    gtk_dialog_set_response_sensitive(GTK_DIALOG(data->mDialog),GTK_RESPONSE_OK,TRUE);
+    gtk_window_present(GTK_WINDOW(data->mDialog));
+    return FALSE;
+}
+
+static gpointer _checking_thread(CheckingData *data)
+{
+    char *out = NULL;
+    int st = -1;
+    g_spawn_command_line_sync("curl http://fileroller.xx51.net/fileroller-latest.do",&out,NULL,&st,NULL);
+    ///g_print("out:%s\n",out);
+    if(out && st == 0){
+        g_key_file_load_from_data(data->keyfile,out,-1,G_KEY_FILE_NONE,NULL);
+    }
+    g_free(out);
+    g_idle_add((GSourceFunc)_on_checking_update_finished,data);
+    return NULL;
+}
+
+static inline void go_check_update(GtkWindow *window)
+{
+    GtkWidget *dialog = gtk_message_dialog_new (window,
+                                                GTK_DIALOG_DESTROY_WITH_PARENT,
+                                                GTK_MESSAGE_INFO,
+                                                GTK_BUTTONS_OK_CANCEL,
+                                                _("Checking for update"));
+    
+    gtk_window_set_position(GTK_WINDOW(dialog),GTK_WIN_POS_CENTER_ON_PARENT);
+    gtk_dialog_set_response_sensitive(GTK_DIALOG(dialog),GTK_RESPONSE_OK,FALSE);
+    gtk_dialog_set_response_sensitive(GTK_DIALOG(dialog),GTK_RESPONSE_CANCEL,FALSE);
+    gtk_message_dialog_format_secondary_markup(GTK_MESSAGE_DIALOG(dialog),_("Please wait ..."));
+    gtk_window_set_title(GTK_WINDOW(dialog),_("Checking update"));
+    gtk_window_present(GTK_WINDOW(dialog));
+    
+    CheckingData *data = g_new0(CheckingData,1);
+    data->mDialog = GTK_MESSAGE_DIALOG(dialog);
+    data->keyfile = g_key_file_new();
+    g_thread_unref(g_thread_new("checking",(GThreadFunc)_checking_thread,data));
+    
+    g_signal_connect(dialog,"response",G_CALLBACK(_on_checking_response),data);
+    
+}
+
+#endif
diff --git a/src/dlg-package-installer.c b/src/dlg-package-installer.c
index 6fa8b4c1..c9259910 100644
--- a/src/dlg-package-installer.c
+++ b/src/dlg-package-installer.c
@@ -22,7 +22,11 @@
 #include <config.h>
 #include <string.h>
 #include <glib/gi18n.h>
+
+#ifndef MAC_INTEGRATION
 #include <gdk/gdkx.h>
+#endif
+
 #include <gtk/gtk.h>
 #include "dlg-package-installer.h"
 #include "gio-utils.h"
diff --git a/src/fr-application.c b/src/fr-application.c
index 60ea595d..b6888483 100644
--- a/src/fr-application.c
+++ b/src/fr-application.c
@@ -41,6 +41,9 @@
 #include "glib-utils.h"
 #include "gtk-utils.h"
 
+#ifdef MAC_INTEGRATION
+#include<gtkosxapplication.h>
+#endif
 
 #define ORG_GNOME_ARCHIVEMANAGER_XML "/org/gnome/FileRoller/../data/org.gnome.ArchiveManager1.xml"
 #define SERVICE_TIMEOUT 10
@@ -453,6 +456,10 @@ struct _FrApplicationPrivate {
 	guint          owner_id;
 	GSettings     *listing_settings;
 	GSettings     *ui_settings;
+    
+#ifdef MAC_INTEGRATION
+    GtkosxApplication *theApp;
+#endif
 };
 
 
@@ -467,7 +474,7 @@ fr_application_finalize (GObject *object)
 		g_bus_unown_name (self->priv->owner_id);
 	_g_object_unref (self->priv->listing_settings);
 	_g_object_unref (self->priv->ui_settings);
-
+    _g_object_unref (self->priv->theApp);
 	release_data ();
 
         G_OBJECT_CLASS (fr_application_parent_class)->finalize (object);
@@ -651,7 +658,7 @@ fr_application_command_line (GApplication            *application,
 
 	if (remaining_args == NULL) { /* No archive specified. */
 		if (! arg_service)
-			gtk_widget_show (fr_window_new ());
+			gtk_window_present (GTK_WINDOW(fr_window_new ()));
 		return fr_application_command_line_finished (application, EXIT_SUCCESS);
 	}
 
@@ -732,7 +739,7 @@ fr_application_command_line (GApplication            *application,
 			GFile     *file;
 
 			window = fr_window_new ();
-			gtk_widget_show (window);
+			gtk_window_present (GTK_WINDOW(window));
 
 			file = g_application_command_line_create_file_for_arg (command_line, filename);
 			fr_window_archive_open (FR_WINDOW (window), file, GTK_WINDOW (window));
@@ -791,13 +798,20 @@ static void
 fr_application_activate (GApplication *application)
 {
 	GList *link;
+    gboolean present_one_window = FALSE;
 
 	for (link = gtk_application_get_windows (GTK_APPLICATION (application));
 	     link != NULL;
 	     link = link->next)
 	{
-		if (! fr_window_is_batch_mode (FR_WINDOW (link->data)))
-			gtk_widget_show (GTK_WIDGET (link->data));
+		if (! fr_window_is_batch_mode (FR_WINDOW (link->data))){
+			if(present_one_window){
+                gtk_widget_show (GTK_WIDGET (link->data));
+            }else{
+                gtk_window_present(GTK_WINDOW(link->data));
+                present_one_window = TRUE;
+            }
+        }
 	}
 
 	gdk_notify_startup_complete ();
@@ -822,6 +836,32 @@ fr_application_class_init (FrApplicationClass *klass)
 	application_class->activate = fr_application_activate;
 }
 
+static void
+fr_application_open_file(FrApplication *self,gchar *path,GtkosxApplication *theApp)
+{
+    GtkWidget *window = NULL;
+    GFile *file;
+    
+    
+    GList *link;
+    
+	for (link = gtk_application_get_windows (GTK_APPLICATION (self));
+	     link != NULL;
+	     link = link->next)
+	{
+        if(fr_window_get_archive_file(FR_WINDOW (link->data)) == NULL){
+            window = GTK_WIDGET (link->data);
+            break;
+        }
+	}
+    
+    if(window == NULL)window = fr_window_new ();
+    gtk_window_present(GTK_WINDOW(window));
+    file = g_file_new_for_path (path);
+    fr_window_archive_open (FR_WINDOW (window), file, GTK_WINDOW (window));
+    
+    g_object_unref (file);
+}
 
 static void
 fr_application_init (FrApplication *self)
@@ -844,6 +884,9 @@ fr_application_init (FrApplication *self)
 	self->priv->introspection_data = NULL;
 	self->priv->listing_settings = g_settings_new (FILE_ROLLER_SCHEMA_LISTING);
 	self->priv->ui_settings = g_settings_new (FILE_ROLLER_SCHEMA_UI);
+    self->priv->theApp = g_object_new(GTKOSX_TYPE_APPLICATION, NULL);
+    
+    g_signal_connect_swapped(self->priv->theApp,"NSApplicationOpenFile",G_CALLBACK(fr_application_open_file),self);
 }
 
 
@@ -852,7 +895,7 @@ fr_application_new (void)
 {
         return g_object_new (fr_application_get_type (),
                              "application-id", "org.gnome.FileRoller",
-                             "flags", G_APPLICATION_FLAGS_NONE,
+                             "flags", G_APPLICATION_HANDLES_COMMAND_LINE,
                              NULL);
 }
 
diff --git a/src/fr-command-lrzip.c b/src/fr-command-lrzip.c
index ad53a13e..6bba7bad 100644
--- a/src/fr-command-lrzip.c
+++ b/src/fr-command-lrzip.c
@@ -45,7 +45,11 @@ list__process_line (char     *line,
 
 	struct stat st;
 	if (stat (comm->filename, &st) == 0)
+#ifdef __APPLE__		
+		fdata->modified = st.st_mtimespec.tv_sec;
+#else
 		fdata->modified = st.st_mtim.tv_sec;
+#endif
 	else
 		time(&(fdata->modified));
 
diff --git a/src/fr-init.c b/src/fr-init.c
index 2c3ad758..e4498162 100644
--- a/src/fr-init.c
+++ b/src/fr-init.c
@@ -57,6 +57,9 @@
 #include "typedefs.h"
 #include "preferences.h"
 
+#ifdef MAC_INTEGRATION
+#include <gtkosxapplication.h>
+#endif
 
 /* The capabilities are computed automatically in
  * compute_supported_archive_types() so it's correct to initialize to 0 here. */
@@ -171,6 +174,11 @@ FrExtensionType file_ext_type[] = {
 };
 
 
+const char*just4icon[]={
+	"gnome-mime-application-x-archive",
+	"package-x-generic"
+};
+
 GList        *CommandList;
 gint          ForceDirectoryCreation;
 GHashTable   *ProgramsCache;
@@ -623,10 +631,18 @@ initialize_data (void)
 					       g_str_equal,
 					       g_free,
 					       NULL);
+#ifdef MAC_INTEGRATION
+	gchar *res_path = gtkosx_application_get_resource_path();
+	if(res_path){
+		gchar *icon_path = g_build_filename(res_path,"/share/"PACKAGE_NAME"/icons",NULL);
+		gtk_icon_theme_append_search_path(gtk_icon_theme_get_default (),icon_path);
+		g_free(res_path);
+		g_free(icon_path);
+	}
+#endif
 
 	gtk_icon_theme_append_search_path (gtk_icon_theme_get_default (),
 					   PKG_DATA_DIR G_DIR_SEPARATOR_S "icons");
-
 	migrate_options_directory ();
 	register_archives ();
 	compute_supported_archive_types ();
diff --git a/src/fr-window.c b/src/fr-window.c
index 3747f5ec..b2d1040c 100644
--- a/src/fr-window.c
+++ b/src/fr-window.c
@@ -4220,7 +4220,7 @@ file_list_drag_begin (GtkWidget          *widget,
 			     8, GDK_PROP_MODE_REPLACE,
 			     (guchar *) XDS_FILENAME,
 			     strlen (XDS_FILENAME));
-
+    g_object_set_data(widget,"dragPromisedFilesOfTypes",0x00000001);
 	return TRUE;
 }
 
@@ -4356,7 +4356,7 @@ fr_window_folder_tree_drag_data_get (GtkWidget        *widget,
 {
 	FrWindow *window = user_data;
 	GList    *file_list;
-	char     *uri;
+	char     *uri = NULL;
 	GFile    *destination;
 	GFile    *destination_folder;
 
@@ -4387,14 +4387,28 @@ fr_window_folder_tree_drag_data_get (GtkWidget        *widget,
 		return TRUE;
 	}
 
+#ifndef GDK_WINDOWING_QUARTZ
 	if (! nautilus_xds_dnd_is_valid_xds_context (context))
 		return FALSE;
 
 	uri  = get_xds_atom_value (context);
+#endif
+
+	if(uri == NULL || uri[0] == 0){
+		uri = g_object_get_data(context,"drag_to_uri");
+		g_object_set_data(context,"drag_to_uri",NULL);
+		g_object_set_data(context,"file_list",file_list);
+	}
 	g_return_val_if_fail (uri != NULL, FALSE);
 
 	destination = g_file_new_for_uri (uri);
-	destination_folder = g_file_get_parent (destination);
+	char *dpath = g_file_get_path(destination);
+	if(g_file_test(dpath,G_FILE_TEST_IS_DIR)){
+		destination_folder = g_file_new_for_path(dpath);
+	}else{
+		destination_folder = g_file_get_parent (destination);	
+	}
+	g_free(dpath);
 
 	g_object_unref (destination);
 
@@ -4417,7 +4431,11 @@ fr_window_folder_tree_drag_data_get (GtkWidget        *widget,
 		g_free (window->priv->drag_base_dir);
 		_g_string_list_free (window->priv->drag_file_list);
 		window->priv->drag_destination_folder = g_object_ref (destination_folder);
-		window->priv->drag_base_dir = fr_window_get_selected_folder_in_tree_view (window);
+		gchar *t0 = fr_window_get_selected_folder_in_tree_view (window);
+		gchar *t1 = g_path_get_dirname(t0);
+		window->priv->drag_base_dir = g_strdup_printf("%s/",t1);
+		g_free(t0);
+		g_free(t1);
 		window->priv->drag_file_list = file_list;
 	}
 
@@ -4429,7 +4447,7 @@ fr_window_folder_tree_drag_data_get (GtkWidget        *widget,
 
 	debug (DEBUG_INFO, "::DragDataGet <--\n");
 
-	return TRUE;
+	return FALSE;
 }
 
 
@@ -4439,7 +4457,7 @@ fr_window_file_list_drag_data_get (FrWindow         *window,
 				   GtkSelectionData *selection_data,
 				   GList            *path_list)
 {
-	char  *uri;
+	char  *uri=NULL;
 	GFile *destination;
 	GFile *destination_folder;
 
@@ -4471,14 +4489,27 @@ fr_window_file_list_drag_data_get (FrWindow         *window,
 		return TRUE;
 	}
 
+#ifndef GDK_WINDOWING_QUARTZ
 	if (! nautilus_xds_dnd_is_valid_xds_context (context))
 		return FALSE;
 
 	uri = get_xds_atom_value (context);
-	g_return_val_if_fail (uri != NULL, FALSE);
+#endif
 
+    if(uri == NULL || uri[0] == 0){
+       uri = g_object_get_data(context,"drag_to_uri");
+       g_object_set_data(context,"drag_to_uri",NULL);
+    }
+	g_return_val_if_fail (uri != NULL, FALSE);
 	destination = g_file_new_for_uri (uri);
-	destination_folder = g_file_get_parent (destination);
+
+	char *dpath = g_file_get_path(destination);
+	if(g_file_test(dpath,G_FILE_TEST_IS_DIR)){
+	    destination_folder = g_file_new_for_path(dpath);
+	}else{
+	    destination_folder = g_file_get_parent (destination);   
+	}
+	g_free(dpath);
 
 	g_object_unref (destination);
 
@@ -4503,6 +4534,7 @@ fr_window_file_list_drag_data_get (FrWindow         *window,
 		window->priv->drag_destination_folder = g_object_ref (destination_folder);
 		window->priv->drag_base_dir = g_strdup (fr_window_get_current_location (window));
 		window->priv->drag_file_list = fr_window_get_file_list_from_path_list (window, path_list, NULL);
+		g_object_set_data(context,"file_list",window->priv->drag_file_list);
 	}
 
 	g_object_unref (destination_folder);
@@ -9021,6 +9053,24 @@ monitor_extracted_files (OpenFilesData *odata)
 	}
 }
 
+static GList *
+fr_window_open_extracted_files_fallback (OpenFilesData *odata)
+{
+       GList *file_list = odata->cdata->file_list;
+       GList *scan = NULL;
+
+       gboolean ret = FALSE;
+       for (scan = file_list; scan; scan = scan->next) {
+               GFile  *file = G_FILE (scan->data);
+               gchar *path = g_file_get_path(file);
+               gchar *cmd = g_strdup_printf("open '%s'",path);
+               ret = g_spawn_command_line_async(cmd,NULL);
+               g_free(path);
+               g_free(cmd);
+               if(!ret)break;
+       }
+       return scan;
+}
 
 static gboolean
 fr_window_open_extracted_files (OpenFilesData *odata)
@@ -9052,6 +9102,9 @@ fr_window_open_extracted_files (OpenFilesData *odata)
 	app = g_app_info_get_default_for_type (first_mime_type, FALSE);
 
 	if (app == NULL) {
+		file_list = fr_window_open_extracted_files_fallback(odata);
+		if(file_list == NULL)return TRUE;
+		first_file = G_FILE (file_list->data);
 		dlg_open_with (odata->window, file_list);
 		return FALSE;
 	}
diff --git a/src/glib-utils.c b/src/glib-utils.c
index f63824e3..5c60ab4d 100644
--- a/src/glib-utils.c
+++ b/src/glib-utils.c
@@ -1035,7 +1035,7 @@ sanitize_filename (const char *file_name)
 {
 	size_t      prefix_len;
 	char const *p;
-
+	if(file_name == NULL || file_name[0] == 0)return NULL;
 	prefix_len = 0;
 	for (p = file_name; *p; ) {
 		if (ISDOT (p[0]) && ISDOT (p[1]) && (ISSLASH (p[2]) || !p[2]))
diff --git a/src/main.c b/src/main.c
index 043f604c..dc3e9244 100644
--- a/src/main.c
+++ b/src/main.c
@@ -24,13 +24,26 @@
 #include <glib/gi18n.h>
 #include "fr-application.h"
 
+
+#ifdef MAC_INTEGRATION
+#include<gtkosxapplication.h>
+#endif
+
 int
 main (int argc, char **argv)
 {
 	GtkApplication *app;
 	int             status;
+    const char *localedir = LOCALEDIR;
 
-	bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
+#ifdef MAC_INTEGRATION
+   gchar *res_path = gtkosx_application_get_resource_path();
+   if(res_path){
+       localedir = g_build_filename(res_path,"/share/locale",NULL);
+       g_free(res_path);
+    }
+#endif
+	bindtextdomain (GETTEXT_PACKAGE, localedir);
 	bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
 	textdomain (GETTEXT_PACKAGE);
 
diff --git a/src/ui/app-menu.ui b/src/ui/app-menu.ui
index cd433811..f9c07c6a 100644
--- a/src/ui/app-menu.ui
+++ b/src/ui/app-menu.ui
@@ -1,9 +1,16 @@
 <interface>
   <menu id="app-menu">
+  	<section>
+	    <item>
+	      <attribute name="action">app.about</attribute>
+	      <attribute name="label" translatable="yes">_About Archive Manager</attribute>
+	    </item>	
+	</section>
     <section>
       <item>
         <attribute name="action">app.new</attribute>
         <attribute name="label" translatable="yes">_New Archive</attribute>
+		<attribute name="accel"><![CDATA[<Primary>N]]></attribute>
       </item>
     </section>
     <section>
@@ -27,16 +34,19 @@
     </section>
     <section>
       <item>
+        <attribute name="action">app.update</attribute>
+        <attribute name="label" translatable="yes">Check update</attribute>
+      </item>
+    </section>
+    <section>
+      <!--item>
         <attribute name="action">app.help</attribute>
         <attribute name="label" translatable="yes">_Help</attribute>
-      </item>
-      <item>
-        <attribute name="action">app.about</attribute>
-        <attribute name="label" translatable="yes">_About Archive Manager</attribute>
-      </item>
+      </item -->
       <item>
         <attribute name="action">app.quit</attribute>
         <attribute name="label" translatable="yes">_Quit</attribute>
+		<attribute name="accel"><![CDATA[<Primary>Q]]></attribute>
       </item>
     </section>
   </menu>
